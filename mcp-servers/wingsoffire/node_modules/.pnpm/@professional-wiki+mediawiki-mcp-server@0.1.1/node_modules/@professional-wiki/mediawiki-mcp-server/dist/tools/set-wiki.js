import { z } from 'zod';
/* eslint-enable n/no-missing-import */
import { updateWikiConfig, getConfig, setCurrentWiki, getAllWikis } from '../common/config.js';
import { makeApiRequest, fetchPageHtml } from '../common/utils.js';
const COMMON_SCRIPT_PATHS = ['/w', ''];
export function setWikiTool(server) {
    return server.tool('set-wiki', 'Set the wiki to use for the current session.', {
        wikiUrl: z.string().url().describe('Any URL from the target wiki (e.g. https://en.wikipedia.org/wiki/Main_Page).')
    }, {
        title: 'Set wiki',
        destructiveHint: true
    }, async (args) => {
        const url = new URL(args.wikiUrl);
        const allWikis = getAllWikis();
        if (allWikis[url.hostname]) {
            setCurrentWiki(url.host);
            const newConfig = getConfig();
            return {
                content: [{
                        type: 'text',
                        text: `Wiki set to ${newConfig.sitename} (${newConfig.server})`
                    }]
            };
        }
        const wikiServer = parseWikiUrl(args.wikiUrl);
        const wikiInfo = await getWikiInfo(wikiServer, args.wikiUrl);
        if (wikiInfo !== null) {
            updateWikiConfig(wikiInfo.servername, {
                sitename: wikiInfo.sitename,
                server: wikiInfo.server,
                articlepath: wikiInfo.articlepath,
                scriptpath: wikiInfo.scriptpath
            });
            setCurrentWiki(wikiInfo.servername);
            const newConfig = getConfig();
            return {
                content: [
                    {
                        type: 'text',
                        text: `Wiki set to ${newConfig.sitename} (${newConfig.server})`
                    }
                ]
            };
        }
        else {
            return {
                content: [
                    {
                        type: 'text',
                        text: 'Failed to determine wiki info. Please ensure the URL is correct and the wiki is accessible.'
                    }
                ],
                error: true
            };
        }
    });
}
function parseWikiUrl(wikiUrl) {
    const url = new URL(wikiUrl);
    return `${url.protocol}//${url.host}`;
}
async function getWikiInfo(wikiServer, originalWikiUrl) {
    return (await fetchUsingCommonScriptPaths(wikiServer)) ??
        (await fetchUsingScriptPathsFromHtml(wikiServer, originalWikiUrl));
}
async function fetchWikiInfoFromApi(wikiServer, scriptPath) {
    const baseUrl = `${wikiServer}${scriptPath}/api.php`;
    const params = {
        action: 'query',
        meta: 'siteinfo',
        siprop: 'general',
        format: 'json',
        origin: '*'
    };
    let data = null;
    try {
        data = await makeApiRequest(baseUrl, params);
    }
    catch (error) {
        console.error(`Error fetching wiki info from ${baseUrl}:`, error);
        return null;
    }
    if (data === null || data.query?.general === undefined) {
        return null;
    }
    const general = data.query.general;
    // We don't need to check for every field, the API should be returning the correct values.
    if (typeof general.scriptpath !== 'string') {
        return null;
    }
    return {
        sitename: general.sitename,
        scriptpath: general.scriptpath,
        articlepath: general.articlepath.replace('/$1', ''),
        server: general.server,
        servername: general.servername
    };
}
async function fetchUsingCommonScriptPaths(wikiServer) {
    for (const candidatePath of COMMON_SCRIPT_PATHS) {
        const apiResult = await fetchWikiInfoFromApi(wikiServer, candidatePath);
        if (apiResult) {
            return apiResult;
        }
    }
    return null;
}
async function fetchUsingScriptPathsFromHtml(wikiServer, originalWikiUrl) {
    const htmlContent = await fetchPageHtml(originalWikiUrl);
    const htmlScriptPathCandidates = extractScriptPathsFromHtml(htmlContent, wikiServer);
    const pathsToTry = htmlScriptPathCandidates.length > 0 ?
        htmlScriptPathCandidates : COMMON_SCRIPT_PATHS;
    for (const candidatePath of pathsToTry) {
        const apiResult = await fetchWikiInfoFromApi(wikiServer, candidatePath);
        if (apiResult) {
            return apiResult;
        }
    }
    return null;
}
function extractScriptPathsFromHtml(htmlContent, wikiServer) {
    const candidatesFromHtml = [];
    if (htmlContent) {
        const fromSearchForm = extractScriptPathFromSearchForm(htmlContent, wikiServer);
        if (fromSearchForm !== null) {
            candidatesFromHtml.push(fromSearchForm);
        }
    }
    const uniqueCandidatesFromHtml = [...new Set(candidatesFromHtml)];
    return uniqueCandidatesFromHtml.filter((p) => typeof p === 'string' && (p === '' || p.trim() !== ''));
}
function extractScriptPathFromSearchForm(htmlContent, wikiServer) {
    const searchFormMatch = htmlContent.match(/<form[^>]+id=['"]searchform['"][^>]+action=['"]([^'"]*index\.php[^'"]*)['"]/i);
    if (searchFormMatch && searchFormMatch[1]) {
        const actionAttribute = searchFormMatch[1];
        try {
            const fullActionUrl = new URL(actionAttribute, wikiServer);
            const path = fullActionUrl.pathname;
            const indexPathIndex = path.toLowerCase().lastIndexOf('/index.php');
            if (indexPathIndex !== -1) {
                return path.slice(0, indexPathIndex);
            }
        }
        catch (e) { }
    }
    return null;
}
