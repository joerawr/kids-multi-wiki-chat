import { z } from 'zod';
/* eslint-enable n/no-missing-import */
import { makeRestPostRequest, getPageUrl } from '../common/utils.js';
export function createPageTool(server) {
    return server.tool('create-page', 'Creates a wiki page with the provided content.', {
        source: z.string().describe('Page content in the format specified by the contentModel parameter'),
        title: z.string().describe('Wiki page title'),
        comment: z.string().describe('Reason for creating the page').optional(),
        contentModel: z.string().describe('Type of content on the page. Defaults to "wikitext"').optional()
    }, {
        title: 'Create page',
        readOnlyHint: false,
        destructiveHint: true
    }, async ({ source, title, comment, contentModel }) => handleCreatePageTool(source, title, comment, contentModel));
}
async function handleCreatePageTool(source, title, comment, contentModel) {
    let data = null;
    try {
        data = await makeRestPostRequest('/v1/page', {
            source: source,
            title: title,
            comment: comment || '',
            // eslint-disable-next-line camelcase
            content_model: contentModel
        }, true);
    }
    catch (error) {
        return {
            content: [
                { type: 'text', text: `Failed to create page: ${error.message}` }
            ],
            isError: true
        };
    }
    if (data === null) {
        return {
            content: [
                { type: 'text', text: 'Failed to create page: No data returned from API' }
            ],
            isError: true
        };
    }
    return {
        content: createPageToolResult(data)
    };
}
function createPageToolResult(result) {
    return [
        {
            type: 'text',
            text: `Page created successfully: ${getPageUrl(result.title)}`
        },
        {
            type: 'text',
            text: [
                'Page object:',
                `Page ID: ${result.id}`,
                `Title: ${result.title}`,
                `Latest revision ID: ${result.latest.id}`,
                `Latest revision timestamp: ${result.latest.timestamp}`,
                `Content model: ${result.content_model}`,
                `License: ${result.license.url} ${result.license.title}`,
                `HTML URL: ${result.html_url}`
            ].join('\n')
        }
    ];
}
