import { z } from 'zod';
/* eslint-enable n/no-missing-import */
import { makeRestGetRequest } from '../common/utils.js';
var ContentFormat;
(function (ContentFormat) {
    ContentFormat["noContent"] = "noContent";
    ContentFormat["withSource"] = "withSource";
    ContentFormat["withHtml"] = "withHtml";
})(ContentFormat || (ContentFormat = {}));
export function getPageTool(server) {
    return server.tool('get-page', 'Returns the standard page object for a wiki page, optionally including page source or rendered HTML, and including the license and information about the latest revision.', {
        title: z.string().describe('Wiki page title'),
        content: z.nativeEnum(ContentFormat).describe('Format of the page content to retrieve').optional().default(ContentFormat.noContent)
    }, {
        title: 'Get page',
        readOnlyHint: true,
        destructiveHint: false
    }, async ({ title, content }) => handleGetPageTool(title, content));
}
async function handleGetPageTool(title, content) {
    let subEndpoint;
    switch (content) {
        case ContentFormat.noContent:
            subEndpoint = '/bare';
            break;
        case ContentFormat.withSource:
            subEndpoint = '';
            break;
        case ContentFormat.withHtml:
            subEndpoint = '/with_html';
            break;
    }
    let data = null;
    try {
        data = await makeRestGetRequest(`/v1/page/${encodeURIComponent(title)}${subEndpoint}`);
    }
    catch (error) {
        return {
            content: [
                { type: 'text', text: `Failed to retrieve page data: ${error.message}` }
            ],
            isError: true
        };
    }
    if (data === null) {
        return {
            content: [
                { type: 'text', text: 'Failed to retrieve page data: No data returned from API' }
            ],
            isError: true
        };
    }
    return {
        content: getPageToolResult(data)
    };
}
function getPageToolResult(result) {
    const results = [
        {
            type: 'text',
            text: [
                `Page ID: ${result.id}`,
                `Title: ${result.title}`,
                `Latest revision ID: ${result.latest.id}`,
                `Latest revision timestamp: ${result.latest.timestamp}`,
                `Content model: ${result.content_model}`,
                `License: ${result.license.url} ${result.license.title}`,
                `HTML URL: ${result.html_url}`
            ].join('\n')
        }
    ];
    if (result.source !== undefined) {
        results.push({
            type: 'text',
            text: `Source:\n${result.source}`
        });
    }
    if (result.html !== undefined) {
        results.push({
            type: 'text',
            text: `HTML:\n${result.html}`
        });
    }
    return results;
}
