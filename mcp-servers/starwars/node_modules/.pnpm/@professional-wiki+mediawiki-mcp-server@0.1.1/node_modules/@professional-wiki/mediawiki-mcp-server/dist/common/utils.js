import fetch from 'node-fetch';
import { USER_AGENT } from '../server.js';
import { scriptPath, wikiServer, oauthToken, articlePath } from './config.js';
async function fetchCore(baseUrl, options) {
    let url = baseUrl;
    if (url.startsWith('//')) {
        url = 'https:' + url;
    }
    if (options?.params) {
        const queryString = new URLSearchParams(options.params).toString();
        if (queryString) {
            url = `${url}?${queryString}`;
        }
    }
    const requestHeaders = {
        'User-Agent': USER_AGENT
    };
    if (options?.headers) {
        Object.assign(requestHeaders, options.headers);
    }
    const fetchOptions = {
        headers: requestHeaders,
        method: options?.method || 'GET'
    };
    if (options?.body) {
        fetchOptions.body = JSON.stringify(options.body);
    }
    const response = await fetch(url, fetchOptions);
    if (!response.ok) {
        const errorBody = await response.text().catch(() => 'Could not read error response body');
        throw new Error(`HTTP error! status: ${response.status} for URL: ${response.url}. Response: ${errorBody}`);
    }
    return response;
}
export async function makeApiRequest(url, params) {
    const response = await fetchCore(url, {
        params,
        headers: { Accept: 'application/json' }
    });
    return (await response.json());
}
export async function makeRestGetRequest(path, params, needAuth = false) {
    try {
        const headers = {
            Accept: 'application/json'
        };
        const token = oauthToken();
        if (needAuth && token !== undefined) {
            headers.Authorization = `Bearer ${token}`;
        }
        const response = await fetchCore(`${wikiServer()}${scriptPath()}/rest.php${path}`, {
            params: params,
            headers: headers
        });
        return (await response.json());
    }
    catch (error) {
        // console.error('Error making API request:', error);
        return null;
    }
}
export async function makeRestPutRequest(path, body, needAuth = false) {
    try {
        const headers = {
            Accept: 'application/json',
            'Content-Type': 'application/json'
        };
        const token = oauthToken();
        if (needAuth && token !== undefined) {
            headers.Authorization = `Bearer ${token}`;
        }
        const response = await fetchCore(`${wikiServer()}${scriptPath()}/rest.php${path}`, {
            headers: headers,
            method: 'PUT',
            body: body
        });
        return (await response.json());
    }
    catch (error) {
        // console.error('Error making API request:', error);
        return null;
    }
}
export async function makeRestPostRequest(path, body, needAuth = false) {
    try {
        const headers = {
            Accept: 'application/json',
            'Content-Type': 'application/json'
        };
        const token = oauthToken();
        if (needAuth && token !== undefined) {
            headers.Authorization = `Bearer ${token}`;
        }
        const response = await fetchCore(`${wikiServer()}${scriptPath()}/rest.php${path}`, {
            headers: headers,
            method: 'POST',
            body: body
        });
        return (await response.json());
    }
    catch (error) {
        // console.error('Error making API request:', error);
        return null;
    }
}
export async function fetchPageHtml(url) {
    try {
        const response = await fetchCore(url);
        return await response.text();
    }
    catch (error) {
        // console.error(`Error fetching HTML page from ${url}:`, error);
        return null;
    }
}
export async function fetchImageAsBase64(url) {
    try {
        const response = await fetchCore(url);
        const arrayBuffer = await response.arrayBuffer();
        const buffer = Buffer.from(arrayBuffer);
        return buffer.toString('base64');
    }
    catch (error) {
        // console.error(`Error fetching image from ${url}:`, error);
        return null;
    }
}
export function getPageUrl(title) {
    return `${wikiServer()}${articlePath()}/${encodeURIComponent(title)}`;
}
