// TODO: Investigate if we can define config as a MCP resource
import * as fs from 'fs';
const defaultConfig = {
    defaultWiki: 'en.wikipedia.org',
    wikis: {
        'en.wikipedia.org': {
            sitename: 'Wikipedia',
            server: 'https://en.wikipedia.org',
            articlepath: '/wiki',
            scriptpath: '/w',
            token: null
        },
        'localhost:8080': {
            sitename: 'Local MediaWiki Docker',
            server: 'http://localhost:8080',
            articlepath: '/wiki',
            scriptpath: '/w',
            token: null
        }
    }
};
const configPath = process.env.CONFIG || 'config.json';
function loadConfigFromFile() {
    if (!fs.existsSync(configPath)) {
        return defaultConfig;
    }
    const rawData = fs.readFileSync(configPath, 'utf-8');
    return JSON.parse(rawData);
}
const config = loadConfigFromFile();
const defaultWiki = config.defaultWiki;
let currentConfig = config.wikis[defaultWiki];
if (!currentConfig) {
    throw new Error(`Default wiki "${defaultWiki}" not found in config.json`);
}
export function getAllWikis() {
    return config.wikis;
}
export function getConfig() {
    return currentConfig;
}
export function setCurrentWiki(wiki) {
    if (!config.wikis[wiki]) {
        throw new Error(`Wiki "${wiki}" not found in config.json`);
    }
    currentConfig = config.wikis[wiki];
}
export function updateWikiConfig(wiki, newConfig) {
    config.wikis[wiki] = { ...newConfig };
    // Do not write to config file for now
    // @see https://github.com/ProfessionalWiki/MediaWiki-MCP-Server/pull/22#issuecomment-2920361315
    // fs.writeFileSync( configPath, JSON.stringify( config, null, 2 ), 'utf-8' );
}
export function resetConfig() {
    if (config.wikis[defaultWiki]) {
        currentConfig = config.wikis[defaultWiki];
    }
    else {
        throw new Error(`Default wiki "${defaultWiki}" not found in config.json`);
    }
}
export const wikiServer = () => getConfig().server;
export const articlePath = () => getConfig().articlepath;
export const scriptPath = () => getConfig().scriptpath;
export const oauthToken = () => {
    const token = getConfig().token;
    return isTokenValid(token) ? token : undefined;
};
export const siteName = () => getConfig().sitename;
function isTokenValid(token) {
    return token !== undefined && token !== null && token !== '';
}
