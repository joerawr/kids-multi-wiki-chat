import { z } from 'zod';
/* eslint-enable n/no-missing-import */
import { makeRestPutRequest, getPageUrl } from '../common/utils.js';
export function updatePageTool(server) {
    return server.tool('update-page', 'Updates a wiki page. Replaces the existing content of a page with the provided content', {
        title: z.string().describe('Wiki page title'),
        source: z.string().describe('Page content in the same content model of the existing page'),
        latestId: z.number().describe('Identifier for the revision used as the base for the new source'),
        comment: z.string().describe('Summary of the edit').optional()
    }, {
        title: 'Update page',
        readOnlyHint: false,
        destructiveHint: true
    }, async ({ title, source, latestId, comment }) => handleUpdatePageTool(title, source, latestId, comment));
}
async function handleUpdatePageTool(title, source, latestId, comment) {
    let data = null;
    try {
        data = await makeRestPutRequest(`/v1/page/${encodeURIComponent(title)}`, {
            source: source,
            comment: comment,
            latest: { id: latestId }
        }, true);
    }
    catch (error) {
        return {
            content: [
                { type: 'text', text: `Failed to update page: ${error.message}` }
            ],
            isError: true
        };
    }
    if (data === null) {
        return {
            content: [
                { type: 'text', text: 'Failed to update page: No data returned from API' }
            ],
            isError: true
        };
    }
    return {
        content: updatePageToolResult(data)
    };
}
function updatePageToolResult(result) {
    return [
        {
            type: 'text',
            text: `Page updated successfully: ${getPageUrl(result.title)}`
        },
        {
            type: 'text',
            text: [
                'Page object:',
                `Page ID: ${result.id}`,
                `Title: ${result.title}`,
                `Latest revision ID: ${result.latest.id}`,
                `Latest revision timestamp: ${result.latest.timestamp}`,
                `Content model: ${result.content_model}`,
                `License: ${result.license.url} ${result.license.title}`,
                `HTML URL: ${result.html_url}`
            ].join('\n')
        }
    ];
}
